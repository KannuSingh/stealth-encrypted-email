/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StealthMailInterface extends utils.Interface {
  functions: {
    "sendEmail(address,bytes32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "sendEmail"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "sendEmail",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "sendEmail", data: BytesLike): Result;

  events: {
    "Announcement(address,bytes32,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Announcement"): EventFragment;
}

export interface AnnouncementEventObject {
  receiver: string;
  pkx: string;
  ciphertext: string;
  cid: string;
}
export type AnnouncementEvent = TypedEvent<
  [string, string, string, string],
  AnnouncementEventObject
>;

export type AnnouncementEventFilter = TypedEventFilter<AnnouncementEvent>;

export interface StealthMail extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StealthMailInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sendEmail(
      _receiver: PromiseOrValue<string>,
      _pkx: PromiseOrValue<BytesLike>,
      _ciphertext: PromiseOrValue<BytesLike>,
      _cid: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  sendEmail(
    _receiver: PromiseOrValue<string>,
    _pkx: PromiseOrValue<BytesLike>,
    _ciphertext: PromiseOrValue<BytesLike>,
    _cid: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    sendEmail(
      _receiver: PromiseOrValue<string>,
      _pkx: PromiseOrValue<BytesLike>,
      _ciphertext: PromiseOrValue<BytesLike>,
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Announcement(address,bytes32,bytes32,bytes)"(
      receiver?: PromiseOrValue<string> | null,
      pkx?: null,
      ciphertext?: null,
      cid?: null
    ): AnnouncementEventFilter;
    Announcement(
      receiver?: PromiseOrValue<string> | null,
      pkx?: null,
      ciphertext?: null,
      cid?: null
    ): AnnouncementEventFilter;
  };

  estimateGas: {
    sendEmail(
      _receiver: PromiseOrValue<string>,
      _pkx: PromiseOrValue<BytesLike>,
      _ciphertext: PromiseOrValue<BytesLike>,
      _cid: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sendEmail(
      _receiver: PromiseOrValue<string>,
      _pkx: PromiseOrValue<BytesLike>,
      _ciphertext: PromiseOrValue<BytesLike>,
      _cid: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

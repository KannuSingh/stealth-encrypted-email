/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StealthKeyRegistryInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "STEALTHKEYS_TYPEHASH()": FunctionFragment;
    "setStealthKeys(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setStealthKeysOnBehalf(address,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "stealthKeys(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "STEALTHKEYS_TYPEHASH"
      | "setStealthKeys"
      | "setStealthKeysOnBehalf"
      | "stealthKeys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STEALTHKEYS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStealthKeys",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStealthKeysOnBehalf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stealthKeys",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STEALTHKEYS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStealthKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStealthKeysOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stealthKeys",
    data: BytesLike
  ): Result;

  events: {
    "StealthKeyChanged(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StealthKeyChanged"): EventFragment;
}

export interface StealthKeyChangedEventObject {
  registrant: string;
  spendingPubKeyPrefix: BigNumber;
  spendingPubKey: BigNumber;
  viewingPubKeyPrefix: BigNumber;
  viewingPubKey: BigNumber;
}
export type StealthKeyChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  StealthKeyChangedEventObject
>;

export type StealthKeyChangedEventFilter =
  TypedEventFilter<StealthKeyChangedEvent>;

export interface StealthKeyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StealthKeyRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    STEALTHKEYS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    setStealthKeys(
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStealthKeysOnBehalf(
      _registrant: PromiseOrValue<string>,
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stealthKeys(
      _registrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        spendingPubKeyPrefix: BigNumber;
        spendingPubKey: BigNumber;
        viewingPubKeyPrefix: BigNumber;
        viewingPubKey: BigNumber;
      }
    >;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  STEALTHKEYS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  setStealthKeys(
    _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
    _spendingPubKey: PromiseOrValue<BigNumberish>,
    _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
    _viewingPubKey: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStealthKeysOnBehalf(
    _registrant: PromiseOrValue<string>,
    _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
    _spendingPubKey: PromiseOrValue<BigNumberish>,
    _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
    _viewingPubKey: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stealthKeys(
    _registrant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      spendingPubKeyPrefix: BigNumber;
      spendingPubKey: BigNumber;
      viewingPubKeyPrefix: BigNumber;
      viewingPubKey: BigNumber;
    }
  >;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    STEALTHKEYS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    setStealthKeys(
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStealthKeysOnBehalf(
      _registrant: PromiseOrValue<string>,
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    stealthKeys(
      _registrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        spendingPubKeyPrefix: BigNumber;
        spendingPubKey: BigNumber;
        viewingPubKeyPrefix: BigNumber;
        viewingPubKey: BigNumber;
      }
    >;
  };

  filters: {
    "StealthKeyChanged(address,uint256,uint256,uint256,uint256)"(
      registrant?: PromiseOrValue<string> | null,
      spendingPubKeyPrefix?: null,
      spendingPubKey?: null,
      viewingPubKeyPrefix?: null,
      viewingPubKey?: null
    ): StealthKeyChangedEventFilter;
    StealthKeyChanged(
      registrant?: PromiseOrValue<string> | null,
      spendingPubKeyPrefix?: null,
      spendingPubKey?: null,
      viewingPubKeyPrefix?: null,
      viewingPubKey?: null
    ): StealthKeyChangedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    STEALTHKEYS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    setStealthKeys(
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStealthKeysOnBehalf(
      _registrant: PromiseOrValue<string>,
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stealthKeys(
      _registrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STEALTHKEYS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStealthKeys(
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStealthKeysOnBehalf(
      _registrant: PromiseOrValue<string>,
      _spendingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _spendingPubKey: PromiseOrValue<BigNumberish>,
      _viewingPubKeyPrefix: PromiseOrValue<BigNumberish>,
      _viewingPubKey: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stealthKeys(
      _registrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
